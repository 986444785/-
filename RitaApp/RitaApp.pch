//
//  RitaApp.pch
//  RitaApp
//
//  Created by BBC on 16/7/8.
//  Copyright © 2016年 Chen. All rights reserved.
//
 
#ifndef RitaApp_pch
#define RitaApp_pch

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.

//tableview背景色
#define TB_BGColor  [UIColor colorWithWhite:0.956 alpha:1.000]

#define KSCREEN_WIDTH     [UIScreen mainScreen].bounds.size.width
#define KSCREEN_HIGHT    [UIScreen mainScreen].bounds.size.height
#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0 green:(g)/255.0 blue:(b)/255.0 alpha:(a)]
#define IS_IPHONE_5 ( fabs( ( double )[ [ UIScreen mainScreen ] bounds ].size.height - ( double )568 ) < DBL_EPSILON )

#define ALERT_MSG(msg) static UIAlertView *alert; alert = [[UIAlertView alloc] initWithTitle:nil message:msg delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];\
[alert show];\


#define SUBJECT_COLOR  [UIColor whiteColor]

/**
 *  比率
 */
#define BiLv   [UIScreen mainScreen].bounds.size.width*1.00/320

#import "UIButton+WebCache.h"
#import "Masonry.h"
#import "MJRefresh.h"
#import "HttpHelper.h"
#import "LSFMessageHint.h"


#import "ZYMessageVC.h"
#import "ZYFriendVC.h"
#import "ZYProfileVC.h"

#import "ZYLocationSingle.h"


#define BASE_URL      @"http://client.rzlapp.com/"


#define USER_ID       @"USER_ID"
#define USER_TOKEN    @"USER_TOKEN"


#define User1         @"12345678"
#define Password1     @"12345678"

#define User2         @"13271617512"


#endif /* RitaApp_pch */


/*
 通常，我们可以在global_queue中做一些long-running的任务，完成后在main_queue中更新UI，避免UI阻塞，无法响应用户操作：
 dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
 // long-running task
 dispatch_async(dispatch_get_main_queue(), ^{
 // update UI
 });
 });


 dispatch_group_async可以实现监听一组任务是否完成，完成后得到通知执行其他的操作。这个方法很有用，比如你执行三个下载任务，当三个任务都下载完成后你才通知界面说完成的了。下面是一段例子代码：

 dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
 dispatch_group_t group = dispatch_group_create();
 dispatch_group_async(group, queue, ^{
 [NSThread sleepForTimeInterval:1];
 NSLog(@"group1");
 });
 dispatch_group_async(group, queue, ^{
 [NSThread sleepForTimeInterval:2];
 NSLog(@"group2");
 });
 dispatch_group_async(group, queue, ^{
 [NSThread sleepForTimeInterval:3];
 NSLog(@"group3");
 });
 dispatch_group_notify(group, dispatch_get_main_queue(), ^{
 NSLog(@"updateUi");
 });
 dispatch_release(group);


 
 */
